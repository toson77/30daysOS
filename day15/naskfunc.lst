     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr, _load_tr, _taskswitch4, _taskswitch3, _farjmp
    14 00000000                                 		GLOBAL 	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL  _memtest_sub
    16 00000000                                 		GLOBAL _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c, _asm_inthandler20
    17 00000000                                 		EXTERN 	_inthandler21, _inthandler27, _inthandler2c, _inthandler20
    18 00000000                                 
    19                                          [SECTION .text]
    20 00000000                                 
    21 00000000                                 _io_hlt:	; void io_hlt(void);
    22 00000000 F4                              		HLT
    23 00000001 C3                              		RET
    24 00000002                                 
    25 00000002                                 _io_cli:	; void io_cli(void);
    26 00000002 FA                              		CLI
    27 00000003 C3                              		RET
    28 00000004                                 
    29 00000004                                 _io_sti:	; void io_sti(void);
    30 00000004 FB                              		STI
    31 00000005 C3                              		RET
    32 00000006                                 
    33 00000006                                 _io_stihlt:	; void io_stihlt(void);
    34 00000006 FB                              		STI
    35 00000007 F4                              		HLT
    36 00000008 C3                              		RET
    37 00000009                                 
    38 00000009                                 _io_in8:	; int io_in8(int port);
    39 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    40 0000000D B8 00000000                     		MOV		EAX,0
    41 00000012 EC                              		IN		AL,DX
    42 00000013 C3                              		RET
    43 00000014                                 
    44 00000014                                 _io_in16:	; int io_in16(int port);
    45 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    46 00000018 B8 00000000                     		MOV		EAX,0
    47 0000001D 66 ED                           		IN		AX,DX
    48 0000001F C3                              		RET
    49 00000020                                 
    50 00000020                                 _io_in32:	; int io_in32(int port);
    51 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    52 00000024 ED                              		IN		EAX,DX
    53 00000025 C3                              		RET
    54 00000026                                 
    55 00000026                                 _io_out8:	; void io_out8(int port, int data);
    56 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    57 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    58 0000002E EE                              		OUT		DX,AL
    59 0000002F C3                              		RET
    60 00000030                                 
    61 00000030                                 _io_out16:	; void io_out16(int port, int data);
    62 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    63 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    64 00000038 66 EF                           		OUT		DX,AX
    65 0000003A C3                              		RET
    66 0000003B                                 
    67 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    68 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    69 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    70 00000043 EF                              		OUT		DX,EAX
    71 00000044 C3                              		RET
    72 00000045                                 
    73 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    74 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
    75 00000046 58                              		POP		EAX
    76 00000047 C3                              		RET
    77 00000048                                 
    78 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    79 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    80 0000004C 50                              		PUSH	EAX
    81 0000004D 9D                              		POPFD		; POP EFLAGS という意味
    82 0000004E C3                              		RET
    83 0000004F                                 
    84 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    85 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    86 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    87 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    88 0000005E C3                              		RET
    89 0000005F                                 
    90 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    91 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    92 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    93 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    94 0000006E C3                              		RET
    95 0000006F                                 
    96 0000006F                                 _load_tr: 		;void load_tr(int tr);
    97 0000006F 0F 00 5C 24 04                  		LTR 	[ESP+4] 		; tr
    98 00000074 C3                              		RET
    99 00000075                                 
   100 00000075                                 _taskswitch3: 	; void taskswitch3(void);
   101 00000075 EA 00000000 0018                		JMP 	3*8:0
   102 0000007C C3                              		RET
   103 0000007D                                 
   104 0000007D                                 _taskswitch4: 	; void taskswitch4(void);
   105 0000007D EA 00000000 0020                		JMP 	4*8:0
   106 00000084 C3                              		RET
   107 00000085                                 
   108 00000085                                 _farjmp: 		; void farjmp(int eip, int cs);
   109 00000085 FF 6C 24 04                     		JMP 	FAR [ESP+4] 	; eip, cs
   110 00000089 C3                              		RET
   111 0000008A                                 
   112 0000008A                                 
   113 0000008A                                 _asm_inthandler20:
   114 0000008A 06                              		PUSH 	ES
   115 0000008B 1E                              		PUSH 	DS
   116 0000008C 60                              		PUSHAD
   117 0000008D 89 E0                           		MOV 	EAX, ESP
   118 0000008F 50                              		PUSH 	EAX
   119 00000090 66 8C D0                        		MOV 	AX, SS
   120 00000093 8E D8                           		MOV 	DS, AX
   121 00000095 8E C0                           		MOV 	ES, AX
   122 00000097 E8 [00000000]                   		CALL 	_inthandler20
   123 0000009C 58                              		POP 	EAX
   124 0000009D 61                              		POPAD
   125 0000009E 1F                              		POP 	DS
   126 0000009F 07                              		POP 	ES
   127 000000A0 CF                              		IRETD
   128 000000A1                                 
   129 000000A1                                 _asm_inthandler21:
   130 000000A1 06                              		PUSH 	ES
   131 000000A2 1E                              		PUSH 	DS
   132 000000A3 60                              		PUSHAD
   133 000000A4 89 E0                           		MOV 	EAX, ESP
   134 000000A6 50                              		PUSH 	EAX
   135 000000A7 66 8C D0                        		MOV 	AX, SS
   136 000000AA 8E D8                           		MOV 	DS, AX
   137 000000AC 8E C0                           		MOV 	ES, AX
   138 000000AE E8 [00000000]                   		CALL 	_inthandler21
   139 000000B3 58                              		POP 	EAX
   140 000000B4 61                              		POPAD
   141 000000B5 1F                              		POP 	DS
   142 000000B6 07                              		POP 	ES
   143 000000B7 CF                              		IRETD
   144 000000B8                                 
   145 000000B8                                 _asm_inthandler27:
   146 000000B8 06                              		PUSH 	ES
   147 000000B9 1E                              		PUSH 	DS
   148 000000BA 60                              		PUSHAD
   149 000000BB 89 E0                           		MOV 	EAX, ESP
   150 000000BD 50                              		PUSH 	EAX
   151 000000BE 66 8C D0                        		MOV 	AX, SS
   152 000000C1 8E D8                           		MOV 	DS, AX
   153 000000C3 8E C0                           		MOV 	ES, AX
   154 000000C5 E8 [00000000]                   		CALL 	_inthandler27
   155 000000CA 58                              		POP 	EAX
   156 000000CB 61                              		POPAD
   157 000000CC 1F                              		POP 	DS
   158 000000CD 07                              		POP 	ES
   159 000000CE CF                              		IRETD
   160 000000CF                                 
   161 000000CF                                 _asm_inthandler2c:
   162 000000CF 06                              		PUSH 	ES
   163 000000D0 1E                              		PUSH 	DS
   164 000000D1 60                              		PUSHAD
   165 000000D2 89 E0                           		MOV 	EAX, ESP
   166 000000D4 50                              		PUSH 	EAX
   167 000000D5 66 8C D0                        		MOV 	AX, SS
   168 000000D8 8E D8                           		MOV 	DS, AX
   169 000000DA 8E C0                           		MOV 	ES, AX
   170 000000DC E8 [00000000]                   		CALL 	_inthandler2c
   171 000000E1 58                              		POP 	EAX
   172 000000E2 61                              		POPAD
   173 000000E3 1F                              		POP 	DS
   174 000000E4 07                              		POP 	ES
   175 000000E5 CF                              		IRETD
   176 000000E6                                 
   177 000000E6                                 _load_cr0: 		; int load_cr0(void);
   178 000000E6 0F 20 C0                        		MOV 	EAX, CR0
   179 000000E9 C3                              		RET
   180 000000EA                                 
   181 000000EA                                 _store_cr0: 	; void store_cr0(int cr0);
   182 000000EA 8B 44 24 04                     		MOV 	EAX, [ESP+4]
   183 000000EE 0F 22 C0                        		MOV 	CR0, EAX
   184 000000F1 C3                              		RET
   185 000000F2                                 
   186 000000F2                                 _memtest_sub: 	;unsigned int memtest_sub(unsigned int start, unsigned int end)
   187 000000F2 57                              		PUSH 	EDI
   188 000000F3 56                              		PUSH 	ESI
   189 000000F4 53                              		PUSH 	EBX
   190 000000F5 BE AA55AA55                     		MOV 	ESI, 0xaa55aa55 	; pat0 = 0xaa55aa55;
   191 000000FA BF 55AA55AA                     		MOV 	EDI, 0x55aa55aa 	; pat1 = 0x55aa55aa;
   192 000000FF 8B 44 24 10                     		MOV 	EAX, [ESP+12+4] 	; i = start;
   193 00000103                                 mts_loop:
   194 00000103 89 C3                           		MOV 	EBX, EAX
   195 00000105 81 C3 00000FFC                  		ADD 	EBX, 0xffc 			; p = i + 0xffc;
   196 0000010B 8B 13                           		MOV 	EDX, [EBX] 			; old = *p;
   197 0000010D 89 33                           		MOV 	[EBX], ESI 			; *p = pat0;
   198 0000010F 83 33 FF                        		XOR 	DWORD [EBX], 0xffffffff 	; *p ^= 0xffffffff;
   199 00000112 3B 3B                           		CMP 	EDI, [EBX] 			; if (*p != pat1) goto fin;
   200 00000114 75 18                           		JNE 	mts_fin
   201 00000116 83 33 FF                        		XOR 	DWORD [EBX], 0xffffffff 	; *p ^= 0xffffffff;
   202 00000119 3B 33                           		CMP 	ESI, [EBX] 			;if ( *p != pat0) goto fin;
   203 0000011B 75 11                           		JNE 	mts_fin
   204 0000011D 89 13                           		MOV 	[EBX], EDX 			; *p = old;
   205 0000011F 05 00000100                     		ADD 	EAX, 0x100 			; i += 0x100
   206 00000124 3B 44 24 14                     		CMP 	EAX, [ESP+12+8] 	; if (i <= end) goto mts_loop;
   207 00000128 76 D9                           		JBE 	mts_loop
   208 0000012A 5B                              		POP 	EBX
   209 0000012B 5E                              		POP 	ESI
   210 0000012C 5F                              		POP 	EDI
   211 0000012D C3                              		RET
   212 0000012E                                 mts_fin:
   213 0000012E 89 13                           		MOV 	[EBX], EDX 			; *p = old;
   214 00000130 5B                              		POP 	EBX
   215 00000131 5E                              		POP 	ESI
   216 00000132 5F                              		POP 	EDI
   217 00000133 C3                              		RET
   218 00000134                                 
